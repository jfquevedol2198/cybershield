import dayjs from "dayjs";
import PropTypes from "prop-types";

import Table from "../../../components/Table";
import Tag from "../../../components/Tag";
import { SortDataType } from "../../../utils";
import { RiskLevel, getRiskLevel } from "../../../utils/risk";

const columns = [
  {
    title: "CVE Name",
    dataIndex: "cvename",
    key: "cvename",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Vulnerability Score",
    dataIndex: "cvescore",
    key: "cvescore",
    sort: true,
    sortDataType: SortDataType.Number,
    colSpan: 1,
    className: "",
    render: (value) => (
      <Tag riskLevel={RiskLevel[getRiskLevel(value)]} label={value} showValue />
    ),
    align: "left",
  },
  {
    title: "Affected assets",
    dataIndex: "asset_count",
    key: "asset_count",
    sort: true,
    sortDataType: SortDataType.Number,
    colSpan: 1,
    className: "",
    render: (value) => <span className="text-link">{value}</span>,
    align: "left",
  },
  {
    title: "Type",
    dataIndex: "type",
    key: "type",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Impact",
    dataIndex: "impact",
    key: "impact",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Released date",
    dataIndex: "releasedate",
    key: "releasedate",
    sort: true,
    sortDataType: SortDataType.Date,
    render: (value) => dayjs(value).format("DD MMM YYYY"),
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Last revised",
    dataIndex: "updated_at",
    key: "updated_at",
    sort: true,
    sortDataType: SortDataType.Date,
    colSpan: 1,
    render: (value) => dayjs(value).format("DD MMM YYYY | HH:mm:ss"),
    className: "",
    align: "left",
  },
  {
    title: "",
    dataIndex: "action",
    key: "action",
    colSpan: 1,
    className: "custom-action-column", // Clase para estilos personalizados
    render: () => (
      <button
        className="button-mitigation" // Clase para estilos desde ButtonMitigation.css
        onClick={() => {}}
      >
        Mitigation
      </button>
    ),
    align: "center",
  },
];

const VulnerabilityTable = ({ data, loading }) => {
  return (
    <div>
      <Table
        columns={columns}
        dataSource={[...data, ...data]}
        loading={loading}
      />
    </div>
  );
};

VulnerabilityTable.propTypes = {
  data: PropTypes.arrayOf(PropTypes.any),
  loading: PropTypes.bool,
};

export default VulnerabilityTable;
