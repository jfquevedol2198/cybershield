import { ChevronDownIcon, ChevronUpIcon } from "@heroicons/react/24/outline";
import dayjs from "dayjs";
import PropTypes from "prop-types";

import Table from "../../../components/Table";
import Tag from "../../../components/Tag";
import { SortDataType } from "../../../utils";
import { RiskLevel, getRiskLevel } from "../../../utils/risk";

const columnsAssets = [
  {
    title: "Asset ID",
    dataIndex: "numeric_id",
    key: "numeric_id",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Name",
    dataIndex: "name_",
    key: "name_",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Type",
    dataIndex: "type",
    key: "type",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Risk",
    dataIndex: "risk_score",
    key: "risk_score",
    sort: true,
    sortDataType: SortDataType.Number,
    colSpan: 1,
    render: (value) => <Tag riskLevel={RiskLevel[getRiskLevel(value * 10)]} />,
    className: "",
    align: "left",
  },
  {
    title: "Mac",
    dataIndex: "interfaces_mac",
    key: "interfaces_mac",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "IP",
    dataIndex: "interfaces_ip",
    key: "interfaces_ip",
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Cell",
    dataIndex: "cellname",
    key: "cellname",
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Vendor",
    dataIndex: "vendor_name",
    key: "vendor_name",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Last Seen",
    dataIndex: "lastseen",
    key: "lastseen",
    sort: true,
    sortDataType: SortDataType.Date,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Location",
    dataIndex: "location",
    key: "location",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
];
const columns = [
  {
    title: "CVE Name",
    dataIndex: "cvename",
    key: "cvename",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Vulnerability Score",
    dataIndex: "cvescore",
    key: "cvescore",
    sort: true,
    sortDataType: SortDataType.Number,
    colSpan: 1,
    className: "",
    render: (value) => (
      <Tag riskLevel={RiskLevel[getRiskLevel(value)]} label={value} showValue />
    ),
    align: "left",
  },
  {
    title: "Affected assets",
    dataIndex: "asset_count",
    key: "asset_count",
    sort: true,
    sortDataType: SortDataType.Number,
    colSpan: 1,
    className: "",
    render: (value) => <span className="text-link">{value}</span>,
  },
  {
    title: "Type",
    dataIndex: "type",
    key: "type",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Impact",
    dataIndex: "impact",
    key: "impact",
    sort: true,
    sortDataType: SortDataType.String,
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Released date",
    dataIndex: "releasedate",
    key: "releasedate",
    sort: true,
    sortDataType: SortDataType.Date,
    render: (value) => dayjs(value).format("DD MMM YYYY"),
    colSpan: 1,
    className: "",
    align: "left",
  },
  {
    title: "Last revised",
    dataIndex: "updated_at",
    key: "updated_at",
    sort: true,
    sortDataType: SortDataType.Date,
    colSpan: 1,
    render: (value) => dayjs(value).format("DD MMM YYYY | HH:mm:ss"),
    className: "",
    align: "left",
  },
  {
    title: "",
    dataIndex: "id",
    key: "action",
    colSpan: 1,
    className: "custom-action-column",
    render: (_value, _record, expanded, onExpand) => (
      <button className="button-mitigation" onClick={onExpand}>
        {expanded ? (
          <ChevronUpIcon className="w-6" />
        ) : (
          <ChevronDownIcon className="w-6" />
        )}
      </button>
    ),
  },
];

const VulnerabilityTable = ({ data, vulAssetsData }) => {
  // DropDown ----------------------------------------------------------------
  const renderExpandedRowContent = (record) => {
    const relatedAssets = vulAssetsData.filter(
      (asset) => asset.idvul === record.id
    );
    return (
      <div className="bg-gray-1 p-4">
        <Table
          columns={columnsAssets}
          dataSource={relatedAssets}
          pagination={false}
        />
      </div>
    );
  };

  return (
    <Table
      columns={columns}
      dataSource={data}
      expandedRowRender={renderExpandedRowContent}
    />
  );
};

VulnerabilityTable.propTypes = {
  data: PropTypes.arrayOf(PropTypes.any),
  vulAssetsData: PropTypes.arrayOf(PropTypes.any),
  loading: PropTypes.bool,
};

export default VulnerabilityTable;
