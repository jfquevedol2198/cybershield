import React, { useState, useEffect } from "react";
import dayjs from "dayjs";
import PropTypes from "prop-types";
import $ from 'jquery';


import Table from "../../../components/Table";
import Tag from "../../../components/Tag";
import { BiChevronDown, BiChevronUp } from "react-icons/bi";
import { SortDataType } from "../../../utils";
import { RiskLevel, getRiskLevel } from "../../../utils/risk";
import { useNavigate } from 'react-router-dom';
import './dropDown.css';
import AssetsTable from "../../Assets/AssetsTable";
import useSearchAndFilter from "../../../hooks/useSearchAndFilter";


const VulnerabilityTable = () => {
  const [data, setData] = useState([]);
  const { setPageData, filterData, addFilter } = useSearchAndFilter();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dataVulnerabilitiesAssets, setDataVulnerabilitiesAssets] = useState([]);
  const navigate = useNavigate();
  const [activeDropdown, setActiveDropdown] = useState(null);
  const [expandedRow, setExpandedRow] = useState(null);
  const [rowStyles, setRowStyles] = useState({});
  const [activeRow, setActiveRow] = useState(null);


  const handleAssetClick = (id) => {
    navigate(`/dashboard/assets/${id}?filterByVulId=${id}`);
  };

  const handleRowClick = (row) => {
    setExpandedRow(expandedRow === row.key ? null : row.key);
  };

  const animationDuration = 500; // Set an appropriate value

  const handleToggleDropdown = (key) => {
    if (activeDropdown === key) {
      // Cerrar dropdown
      setActiveDropdown(null);
      setTimeout(() => {
        setExpandedRow(null);
        // Restaurar el color original de la fila al cerrar el dropdown
        $(`#row-${key}`).removeClass('dropdown-opened');
      }, animationDuration); // Espera a que la transiciÃ³n termine
    } else {
      // Abrir dropdown
      setActiveDropdown(key);
      setExpandedRow(key);
      // Cambiar el color de la fila al abrir el dropdown
      $(`#row-${key}`).addClass('dropdown-opened');
    }
  };
  useEffect(() => {
    setLoading(true);

    Promise.all([
      fetch("http://3.128.30.222:8000/vulnerabilities_view").then(res => res.json()),
      fetch("http://3.128.30.222:8000/vulnerabilities_assets_view").then(res => res.json())
    ])
      .then(([dataVulnerabilities, dataVulnerabilitiesAssets]) => {
        console.log("Data from API:", dataVulnerabilitiesAssets);
        const assetsCountByVulId = dataVulnerabilitiesAssets.reduce((acc, asset) => {
          const vulId = asset.idvul;
          acc[vulId] = (acc[vulId] || 0) + 1;
          return acc;
        }, {});

        const combinedData = dataVulnerabilities.map(vul => {
          return {
            ...vul,
            asset_count: assetsCountByVulId[vul.id] || 0,
            isExpanded: false
          };
        });

        setData(combinedData);
        setDataVulnerabilitiesAssets(dataVulnerabilitiesAssets);
        console.log("State after update:", dataVulnerabilitiesAssets);
        setLoading(false);
      })
      .catch(error => {
        setError(error.message);
        setLoading(false);
      });

  }, []);

  const columns = [
    {
      title: "CVE Name",
      dataIndex: "cvename",
      key: "cvename",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Vulnerability Score",
      dataIndex: "cvescore",
      key: "cvescore",
      sort: true,
      sortDataType: SortDataType.Number,
      colSpan: 1,
      className: "",
      render: (value) => (
        <Tag riskLevel={RiskLevel[getRiskLevel(value)]} label={value} showValue />
      ),
      align: "left",
    },
    {
      title: "Affected assets",
      dataIndex: "asset_count",
      key: "asset_count",
      sort: true,
      sortDataType: SortDataType.Number,
      colSpan: 1,
      className: "",
      render: (value, record) => (
        <span
          className="text-link"
        >
          {value}
        </span>
      ),
    },
    {
      title: "Type",
      dataIndex: "type",
      key: "type",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Impact",
      dataIndex: "impact",
      key: "impact",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Released date",
      dataIndex: "releasedate",
      key: "releasedate",
      sort: true,
      sortDataType: SortDataType.Date,
      render: (value) => dayjs(value).format("DD MMM YYYY"),
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Last revised",
      dataIndex: "updated_at",
      key: "updated_at",
      sort: true,
      sortDataType: SortDataType.Date,
      colSpan: 1,
      render: (value) => dayjs(value).format("DD MMM YYYY | HH:mm:ss"),
      className: "",
      align: "left",
    },
    {
      title: "",
      dataIndex: "id",
      key: "action",
      colSpan: 1,
      className: "custom-action-column",
      render: (value, record) => (
        <button
          className="button-mitigation"
          onClick={() => handleToggleDropdown(record.id)}
        >
          {expandedRow === record.key ? <BiChevronUp /> : <BiChevronDown />}
        </button>
      ),
    }
  ];

  const columnsAssets = [
    {
      title: "Asset ID",
      dataIndex: "numeric_id",
      key: "numeric_id",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Name",
      dataIndex: "name_",
      key: "name_",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Type",
      dataIndex: "type",
      key: "type",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Risk",
      dataIndex: "risk_score",
      key: "risk_score",
      sort: true,
      sortDataType: SortDataType.Number,
      colSpan: 1,
      render: (value) => <Tag riskLevel={RiskLevel[getRiskLevel(value * 10)]} />,
      className: "",
      align: "left",
    },
    {
      title: "Mac",
      dataIndex: "interfaces_mac",
      key: "interfaces_mac",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "IP",
      dataIndex: "interfaces_ip",
      key: "interfaces_ip",
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Cell",
      dataIndex: "cellname",
      key: "cellname",
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Vendor",
      dataIndex: "vendor_name",
      key: "vendor_name",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Last Seen",
      dataIndex: "lastseen",
      key: "lastseen",
      sort: true,
      sortDataType: SortDataType.Date,
      colSpan: 1,
      className: "",
      align: "left",
    },
    {
      title: "Location",
      dataIndex: "location",
      key: "location",
      sort: true,
      sortDataType: SortDataType.String,
      colSpan: 1,
      className: "",
      align: "left",
    },
  ];

  // DropDown ----------------------------------------------------------------
  const renderExpandedRowContent = (record) => {
    const isActive = activeDropdown === record.id;
    const isClosed = !isActive && expandedRow === record.key;

    if (record.key === expandedRow) {
      const relatedAssets = dataVulnerabilitiesAssets.filter(asset => asset.idvul === record.id);
      return (
        <div
          id={`row-${record.id}`}
          className={`dropdown-style ${isActive ? 'open' : isClosed ? 'closed' : ''}`}
          style={isActive ? { animation: 'slideDown 0.5s ease' } : isClosed ? { animation: 'slideUp 0.5s ease' } : {}}
        >
          <div className="dropdown-int">
            <Table columns={columnsAssets} dataSource={relatedAssets} pagination={false} />;
          </div>
        </div>
      );
    }
    return null;
  };

  const getRowStyle = (data) => {
    return {
      backgroundColor: activeRow === data.id ? '#e4e6ee' : '',
      ...rowStyles[data.id] || {},
    };
  };

  return (
    <Table
      columns={columns}
      rowClassName={(record) => (activeRow === record.id ? 'bg-info' : '')}
      dataSource={data.map(item => ({
        ...item,
        key: item.id,
        style: getRowStyle(item),
      }))}
      loading={loading}
      expandedRowRender={renderExpandedRowContent}
    />
  );
};

VulnerabilityTable.propTypes = {
  data: PropTypes.arrayOf(PropTypes.any),
  loading: PropTypes.bool,
};

export default VulnerabilityTable;